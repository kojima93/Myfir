name: backtest-and-report (JWT)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      BOX_FOLDER_ID: ${{ secrets.BOX_FOLDER_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt || true
          pip install yfinance matplotlib pandas scikit-learn
          pip install PyJWT cryptography
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run backtest
        run: python main.py

      # ==== JWT でアクセストークン取得 ====
      - name: Get Box access token via JWT
        env:
          BOX_CLIENT_ID: ${{ secrets.BOX_CLIENT_ID }}
          BOX_CLIENT_SECRET: ${{ secrets.BOX_CLIENT_SECRET }}
          BOX_ENTERPRISE_ID: ${{ secrets.BOX_ENTERPRISE_ID }}
          BOX_JWT_KID: ${{ secrets.BOX_JWT_KID }}
          BOX_JWT_PRIVATE_KEY: ${{ secrets.BOX_JWT_PRIVATE_KEY }}
          BOX_JWT_PASSPHRASE: ${{ secrets.BOX_JWT_PASSPHRASE }}
        run: |
          set -e
          # 1) Pythonスクリプトを書き出す（heredocのYAML崩れを防ぐ）
          cat > jwt_token.py <<'PY'
import os, time, uuid, json
import jwt  # PyJWT
from urllib import request, parse

CLIENT_ID = os.environ["BOX_CLIENT_ID"]
CLIENT_SECRET = os.environ["BOX_CLIENT_SECRET"]
ENTERPRISE_ID = os.environ["BOX_ENTERPRISE_ID"]
KID = os.environ["BOX_JWT_KID"]
PRIVATE_KEY = os.environ["BOX_JWT_PRIVATE_KEY"]
PASSPHRASE = os.environ["BOX_JWT_PASSPHRASE"].encode("utf-8")

# JWT（Enterprise主体）を作成
now = int(time.time())
claims = {
  "iss": CLIENT_ID,
  "sub": ENTERPRISE_ID,
  "box_sub_type": "enterprise",
  "aud": "https://api.box.com/oauth2/token",
  "jti": str(uuid.uuid4()),
  "exp": now + 45
}
headers = {"kid": KID, "typ": "JWT"}

assertion = jwt.encode(
    payload=claims,
    key=PRIVATE_KEY,
    algorithm="RS512",
    headers=headers,
    passphrase=PASSPHRASE
)

data = parse.urlencode({
  "grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
  "client_id": CLIENT_ID,
  "client_secret": CLIENT_SECRET,
  "assertion": assertion
}).encode("utf-8")

req = request.Request("https://api.box.com/oauth2/token", data=data, method="POST")
req.add_header("Content-Type", "application/x-www-form-urlencoded")

with request.urlopen(req) as resp:
    body = json.loads(resp.read().decode("utf-8"))
    print(json.dumps(body, indent=2))
    token = body.get("access_token")

if not token:
    raise SystemExit("Failed to obtain Box access token via JWT")

# GitHub環境に書き出す
with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as f:
    f.write(f"BOX_TOKEN={token}\n")
PY
          # 2) 実行
          python jwt_token.py

      # 同名があれば上書き／なければ新規アップロード
      - name: Define upload helper
        shell: bash
        run: |
          cat << 'EOS' > upload_or_update.sh
          #!/usr/bin/env bash
          set -euo pipefail
          FILEPATH="$1"
          BASENAME="$(basename "$FILEPATH")"

          # フォルダ内から同名ファイルのIDを取得
          ITEMS_JSON="$(curl -sS -H "Authorization: Bearer ${BOX_TOKEN}" \
            "https://api.box.com/2.0/folders/${BOX_FOLDER_ID}/items?fields=id,name&limit=1000")"
          FILE_ID="$(echo "$ITEMS_JSON" | jq -r --arg NAME "$BASENAME" '.entries[] | select(.name == $NAME) | .id' | head -n1 || true)"

          if [[ -n "${FILE_ID}" && "${FILE_ID}" != "null" ]]; then
            echo "Updating ${BASENAME} (id=${FILE_ID})"
            curl -fS -X POST "https://upload.box.com/api/2.0/files/${FILE_ID}/content" \
              -H "Authorization: Bearer ${BOX_TOKEN}" \
              -F "file=@${FILEPATH}"
          else
            echo "Uploading ${BASENAME} to folder ${BOX_FOLDER_ID}"
            curl -fS "https://upload.box.com/api/2.0/files/content" \
              -H "Authorization: Bearer ${BOX_TOKEN}" \
              -F "attributes={\"name\":\"${BASENAME}\",\"parent\":{\"id\":\"${BOX_FOLDER_ID}\"}}" \
              -F "file=@${FILEPATH}"
          fi
          echo "Done: ${BASENAME}"
          EOS
          chmod +x upload_or_update.sh

      - name: Upload reports to Box (overwrite if exists)
        run: |
          ./upload_or_update.sh reports/price_with_trades.png
          ./upload_or_update.sh reports/equity_curve.png
          ./upload_or_update.sh reports/trades.csv
          ./upload_or_update.sh reports/metrics.txt
